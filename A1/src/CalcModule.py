## @file CalcModule.py
#  @author Bill Nguyen
#  @brief Sorts, calculates averages and allocates students entering second year
#  @date January 18, 2019

from ReadAllocationData import *

## @brief Sorts list of students in descending order
#  @param S is list of dictionaries generated from the readStdnts function
#  @return List of dictionaries that is sorted in descending order based on gpa
def sort(S):
    for j in range(len(S)):
        index = 0
        while index < (len(S) - 1):
            if (S[index]["gpa"] > S[index+1]["gpa"]) or (S[index]["gpa"] == S[index+1]["gpa"]):
                index += 1
            else:
                temp = S[index]
                S[index] = S[index + 1]
                S[index+1] = temp
    return S

## @brief Calculates average of all males or females students
#  @param L is a list of dictionaries generated from readStdnts function
#  @param g is a string that has the input male or female
#  @return Average of all males or females students

def average(L, g):
    sum_g = 0
    count = 0
    if g != "male" and g != "female":
        return "in g enter male or female"
    for student in L:
        if student["gender"] == g:
            sum_g += student["gpa"]
            count += 1
    if count == 0:
        return 0
    else:
        return sum_g/count

## @brief Allocates all students to second year stream
#  @param S a list of dictionaries generated by readStdnts function
#  @param F a list that contains students with free choice
#  @param C a dictionary that contains all department capacities
#  @return  a dictionary that allocates all qualified students to their second year stream
def allocate(S, F, C):
    choice_dict = { "civil": [], "chemical": [],"electrical": [],"software": [],"materials": [],"mechanical": [],"engphys": [] }
    freeChoice_list = []
    S_list = []
    for student in S:
        if (student["gpa"] >= 4.0) and (student["macid"] in F) and (student["gpa"] <= 12.0):
            freeChoice_list.append(student)
        elif (student["gpa"] >= 4.0) and (student["gpa"] <= 12.0):
            S_list.append(student)

    freeChoice_list = sort(freeChoice_list)
    
    for student in freeChoice_list:
        for x in student["choices"]:
            if C[x] > len(choice_dict[x]):
                choice_dict[x].append(student)
                break
        
    sorted_list = sort(S_list)
    
    for student in sorted_list:
        for x in student["choices"]:
            if C[x] > len(choice_dict[x]):
                choice_dict[x].append(student)
                break
    
    return choice_dict
    
